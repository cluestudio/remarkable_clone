// automatically generated by the FlatBuffers compiler, do not modify

package com.clue.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public class RmsVariable extends Table {
  public static RmsVariable getRootAsRmsVariable(ByteBuffer _bb) { return getRootAsRmsVariable(_bb, new RmsVariable()); }
  public static RmsVariable getRootAsRmsVariable(ByteBuffer _bb, RmsVariable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public RmsVariable __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public short playTime() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short countDownTime() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String minVersion() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer minVersionAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public short winExp() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short loseExp() { int o = __offset(12); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short drawExp() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short maxLevel() { int o = __offset(16); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short maxLeague() { int o = __offset(18); return o != 0 ? bb.getShort(o + bb_pos) : 0; }

  public static int createRmsVariable(FlatBufferBuilder builder,
      short playTime,
      short countDownTime,
      int minVersionOffset,
      short winExp,
      short loseExp,
      short drawExp,
      short maxLevel,
      short maxLeague) {
    builder.startObject(8);
    RmsVariable.addMinVersion(builder, minVersionOffset);
    RmsVariable.addMaxLeague(builder, maxLeague);
    RmsVariable.addMaxLevel(builder, maxLevel);
    RmsVariable.addDrawExp(builder, drawExp);
    RmsVariable.addLoseExp(builder, loseExp);
    RmsVariable.addWinExp(builder, winExp);
    RmsVariable.addCountDownTime(builder, countDownTime);
    RmsVariable.addPlayTime(builder, playTime);
    return RmsVariable.endRmsVariable(builder);
  }

  public static void startRmsVariable(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addPlayTime(FlatBufferBuilder builder, short playTime) { builder.addShort(0, playTime, 0); }
  public static void addCountDownTime(FlatBufferBuilder builder, short countDownTime) { builder.addShort(1, countDownTime, 0); }
  public static void addMinVersion(FlatBufferBuilder builder, int minVersionOffset) { builder.addOffset(2, minVersionOffset, 0); }
  public static void addWinExp(FlatBufferBuilder builder, short winExp) { builder.addShort(3, winExp, 0); }
  public static void addLoseExp(FlatBufferBuilder builder, short loseExp) { builder.addShort(4, loseExp, 0); }
  public static void addDrawExp(FlatBufferBuilder builder, short drawExp) { builder.addShort(5, drawExp, 0); }
  public static void addMaxLevel(FlatBufferBuilder builder, short maxLevel) { builder.addShort(6, maxLevel, 0); }
  public static void addMaxLeague(FlatBufferBuilder builder, short maxLeague) { builder.addShort(7, maxLeague, 0); }
  public static int endRmsVariable(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

