// automatically generated by the FlatBuffers compiler, do not modify

package com.clue.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public class RmPlaylog extends Table {
  public static RmPlaylog getRootAsRmPlaylog(ByteBuffer _bb) { return getRootAsRmPlaylog(_bb, new RmPlaylog()); }
  public static RmPlaylog getRootAsRmPlaylog(ByteBuffer _bb, RmPlaylog obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public RmPlaylog __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public String pid() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pidAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String player0() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer player0AsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public String player1() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer player1AsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public String winner() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer winnerAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public String name0() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer name0AsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public short leaguePoint0() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short rewardPoint0() { int o = __offset(16); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String name1() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer name1AsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public short leaguePoint1() { int o = __offset(20); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short rewardPoint1() { int o = __offset(22); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public long birth() { int o = __offset(24); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public int playTime() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String ver() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer verAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public byte raw(int j) { int o = __offset(30); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int rawLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer rawAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }

  public static int createRmPlaylog(FlatBufferBuilder builder,
      int pidOffset,
      int player0Offset,
      int player1Offset,
      int winnerOffset,
      int name0Offset,
      short leaguePoint0,
      short rewardPoint0,
      int name1Offset,
      short leaguePoint1,
      short rewardPoint1,
      long birth,
      int playTime,
      int verOffset,
      int rawOffset) {
    builder.startObject(14);
    RmPlaylog.addBirth(builder, birth);
    RmPlaylog.addRaw(builder, rawOffset);
    RmPlaylog.addVer(builder, verOffset);
    RmPlaylog.addPlayTime(builder, playTime);
    RmPlaylog.addName1(builder, name1Offset);
    RmPlaylog.addName0(builder, name0Offset);
    RmPlaylog.addWinner(builder, winnerOffset);
    RmPlaylog.addPlayer1(builder, player1Offset);
    RmPlaylog.addPlayer0(builder, player0Offset);
    RmPlaylog.addPid(builder, pidOffset);
    RmPlaylog.addRewardPoint1(builder, rewardPoint1);
    RmPlaylog.addLeaguePoint1(builder, leaguePoint1);
    RmPlaylog.addRewardPoint0(builder, rewardPoint0);
    RmPlaylog.addLeaguePoint0(builder, leaguePoint0);
    return RmPlaylog.endRmPlaylog(builder);
  }

  public static void startRmPlaylog(FlatBufferBuilder builder) { builder.startObject(14); }
  public static void addPid(FlatBufferBuilder builder, int pidOffset) { builder.addOffset(0, pidOffset, 0); }
  public static void addPlayer0(FlatBufferBuilder builder, int player0Offset) { builder.addOffset(1, player0Offset, 0); }
  public static void addPlayer1(FlatBufferBuilder builder, int player1Offset) { builder.addOffset(2, player1Offset, 0); }
  public static void addWinner(FlatBufferBuilder builder, int winnerOffset) { builder.addOffset(3, winnerOffset, 0); }
  public static void addName0(FlatBufferBuilder builder, int name0Offset) { builder.addOffset(4, name0Offset, 0); }
  public static void addLeaguePoint0(FlatBufferBuilder builder, short leaguePoint0) { builder.addShort(5, leaguePoint0, 0); }
  public static void addRewardPoint0(FlatBufferBuilder builder, short rewardPoint0) { builder.addShort(6, rewardPoint0, 0); }
  public static void addName1(FlatBufferBuilder builder, int name1Offset) { builder.addOffset(7, name1Offset, 0); }
  public static void addLeaguePoint1(FlatBufferBuilder builder, short leaguePoint1) { builder.addShort(8, leaguePoint1, 0); }
  public static void addRewardPoint1(FlatBufferBuilder builder, short rewardPoint1) { builder.addShort(9, rewardPoint1, 0); }
  public static void addBirth(FlatBufferBuilder builder, long birth) { builder.addLong(10, birth, 0); }
  public static void addPlayTime(FlatBufferBuilder builder, int playTime) { builder.addInt(11, playTime, 0); }
  public static void addVer(FlatBufferBuilder builder, int verOffset) { builder.addOffset(12, verOffset, 0); }
  public static void addRaw(FlatBufferBuilder builder, int rawOffset) { builder.addOffset(13, rawOffset, 0); }
  public static int createRawVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startRawVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endRmPlaylog(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

