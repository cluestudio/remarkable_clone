// automatically generated by the FlatBuffers compiler, do not modify

package com.clue.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public class RmmUnit extends Table {
  public static RmmUnit getRootAsRmmUnit(ByteBuffer _bb) { return getRootAsRmmUnit(_bb, new RmmUnit()); }
  public static RmmUnit getRootAsRmmUnit(ByteBuffer _bb, RmmUnit obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public RmmUnit __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public short key() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short name() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public byte level() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public short exp() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public byte type() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public short hp() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public RmmVector2 position() { return position(new RmmVector2()); }
  public RmmVector2 position(RmmVector2 obj) { int o = __offset(16); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }
  public RmmVector2b direction() { return direction(new RmmVector2b()); }
  public RmmVector2b direction(RmmVector2b obj) { int o = __offset(18); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }
  public short skill1FireSec() { int o = __offset(20); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short skill2FireSec() { int o = __offset(22); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short skill3FireSec() { int o = __offset(24); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short skillSpecialFireSec() { int o = __offset(26); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public RmmAbnormal abnormalList(int j) { return abnormalList(new RmmAbnormal(), j); }
  public RmmAbnormal abnormalList(RmmAbnormal obj, int j) { int o = __offset(28); return o != 0 ? obj.__init(__vector(o) + j * 12, bb) : null; }
  public int abnormalListLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }

  public static void startRmmUnit(FlatBufferBuilder builder) { builder.startObject(13); }
  public static void addKey(FlatBufferBuilder builder, short key) { builder.addShort(0, key, 0); }
  public static void addName(FlatBufferBuilder builder, short name) { builder.addShort(1, name, 0); }
  public static void addLevel(FlatBufferBuilder builder, byte level) { builder.addByte(2, level, 0); }
  public static void addExp(FlatBufferBuilder builder, short exp) { builder.addShort(3, exp, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(4, type, 0); }
  public static void addHp(FlatBufferBuilder builder, short hp) { builder.addShort(5, hp, 0); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addStruct(6, positionOffset, 0); }
  public static void addDirection(FlatBufferBuilder builder, int directionOffset) { builder.addStruct(7, directionOffset, 0); }
  public static void addSkill1FireSec(FlatBufferBuilder builder, short skill1FireSec) { builder.addShort(8, skill1FireSec, 0); }
  public static void addSkill2FireSec(FlatBufferBuilder builder, short skill2FireSec) { builder.addShort(9, skill2FireSec, 0); }
  public static void addSkill3FireSec(FlatBufferBuilder builder, short skill3FireSec) { builder.addShort(10, skill3FireSec, 0); }
  public static void addSkillSpecialFireSec(FlatBufferBuilder builder, short skillSpecialFireSec) { builder.addShort(11, skillSpecialFireSec, 0); }
  public static void addAbnormalList(FlatBufferBuilder builder, int abnormalListOffset) { builder.addOffset(12, abnormalListOffset, 0); }
  public static void startAbnormalListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(12, numElems, 2); }
  public static int endRmmUnit(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

