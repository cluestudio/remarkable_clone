// automatically generated by the FlatBuffers compiler, do not modify

package com.clue.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public class RmmNotiAbnormal extends Table {
  public static RmmNotiAbnormal getRootAsRmmNotiAbnormal(ByteBuffer _bb) { return getRootAsRmmNotiAbnormal(_bb, new RmmNotiAbnormal()); }
  public static RmmNotiAbnormal getRootAsRmmNotiAbnormal(ByteBuffer _bb, RmmNotiAbnormal obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public RmmNotiAbnormal __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public short sec() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public RmmAbnormal abnormal(int j) { return abnormal(new RmmAbnormal(), j); }
  public RmmAbnormal abnormal(RmmAbnormal obj, int j) { int o = __offset(6); return o != 0 ? obj.__init(__vector(o) + j * 12, bb) : null; }
  public int abnormalLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createRmmNotiAbnormal(FlatBufferBuilder builder,
      short sec,
      int abnormalOffset) {
    builder.startObject(2);
    RmmNotiAbnormal.addAbnormal(builder, abnormalOffset);
    RmmNotiAbnormal.addSec(builder, sec);
    return RmmNotiAbnormal.endRmmNotiAbnormal(builder);
  }

  public static void startRmmNotiAbnormal(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addSec(FlatBufferBuilder builder, short sec) { builder.addShort(0, sec, 0); }
  public static void addAbnormal(FlatBufferBuilder builder, int abnormalOffset) { builder.addOffset(1, abnormalOffset, 0); }
  public static void startAbnormalVector(FlatBufferBuilder builder, int numElems) { builder.startVector(12, numElems, 2); }
  public static int endRmmNotiAbnormal(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

