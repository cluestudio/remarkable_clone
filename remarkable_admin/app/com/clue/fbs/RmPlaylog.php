<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmPlaylog extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmPlaylog
     */
    public static function getRootAsRmPlaylog(ByteBuffer $bb)
    {
        $obj = new RmPlaylog();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmPlaylog
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getPid()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getPlayer0()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getPlayer1()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getWinner()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getName0()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return short
     */
    public function getLeaguePoint0()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getRewardPoint0()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    public function getName1()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return short
     */
    public function getLeaguePoint1()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getRewardPoint1()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return long
     */
    public function getBirth()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getPlayTime()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    public function getVer()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param int offset
     * @return sbyte
     */
    public function getRaw($j)
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getSbyte($this->__vector($o) + $j * 1) : 0;
    }

    /**
     * @return int
     */
    public function getRawLength()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmPlaylog(FlatBufferBuilder $builder)
    {
        $builder->StartObject(14);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmPlaylog
     */
    public static function createRmPlaylog(FlatBufferBuilder $builder, $pid, $player0, $player1, $winner, $name0, $leaguePoint0, $rewardPoint0, $name1, $leaguePoint1, $rewardPoint1, $birth, $playTime, $ver, $raw)
    {
        $builder->startObject(14);
        self::addPid($builder, $pid);
        self::addPlayer0($builder, $player0);
        self::addPlayer1($builder, $player1);
        self::addWinner($builder, $winner);
        self::addName0($builder, $name0);
        self::addLeaguePoint0($builder, $leaguePoint0);
        self::addRewardPoint0($builder, $rewardPoint0);
        self::addName1($builder, $name1);
        self::addLeaguePoint1($builder, $leaguePoint1);
        self::addRewardPoint1($builder, $rewardPoint1);
        self::addBirth($builder, $birth);
        self::addPlayTime($builder, $playTime);
        self::addVer($builder, $ver);
        self::addRaw($builder, $raw);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPid(FlatBufferBuilder $builder, $pid)
    {
        $builder->addOffsetX(0, $pid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlayer0(FlatBufferBuilder $builder, $player0)
    {
        $builder->addOffsetX(1, $player0, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPlayer1(FlatBufferBuilder $builder, $player1)
    {
        $builder->addOffsetX(2, $player1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addWinner(FlatBufferBuilder $builder, $winner)
    {
        $builder->addOffsetX(3, $winner, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName0(FlatBufferBuilder $builder, $name0)
    {
        $builder->addOffsetX(4, $name0, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addLeaguePoint0(FlatBufferBuilder $builder, $leaguePoint0)
    {
        $builder->addShortX(5, $leaguePoint0, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addRewardPoint0(FlatBufferBuilder $builder, $rewardPoint0)
    {
        $builder->addShortX(6, $rewardPoint0, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName1(FlatBufferBuilder $builder, $name1)
    {
        $builder->addOffsetX(7, $name1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addLeaguePoint1(FlatBufferBuilder $builder, $leaguePoint1)
    {
        $builder->addShortX(8, $leaguePoint1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addRewardPoint1(FlatBufferBuilder $builder, $rewardPoint1)
    {
        $builder->addShortX(9, $rewardPoint1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addBirth(FlatBufferBuilder $builder, $birth)
    {
        $builder->addLongX(10, $birth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPlayTime(FlatBufferBuilder $builder, $playTime)
    {
        $builder->addIntX(11, $playTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVer(FlatBufferBuilder $builder, $ver)
    {
        $builder->addOffsetX(12, $ver, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addRaw(FlatBufferBuilder $builder, $raw)
    {
        $builder->addOffsetX(13, $raw, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createRawVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(1, count($data), 1);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->addSbyte($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startRawVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(1, $numElems, 1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmPlaylog(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
