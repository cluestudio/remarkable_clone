<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmResJoin extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmmResJoin
     */
    public static function getRootAsRmmResJoin(ByteBuffer $bb)
    {
        $obj = new RmmResJoin();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmResJoin
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getRoomId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return sbyte
     */
    public function getPlayerNo()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    /**
     * @return long
     */
    public function getTimestamp()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getResultCode()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : \com\clue\fbs\RmResultCode::Success;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmmResJoin(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmmResJoin
     */
    public static function createRmmResJoin(FlatBufferBuilder $builder, $roomId, $playerNo, $timestamp, $resultCode)
    {
        $builder->startObject(4);
        self::addRoomId($builder, $roomId);
        self::addPlayerNo($builder, $playerNo);
        self::addTimestamp($builder, $timestamp);
        self::addResultCode($builder, $resultCode);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRoomId(FlatBufferBuilder $builder, $roomId)
    {
        $builder->addOffsetX(0, $roomId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPlayerNo(FlatBufferBuilder $builder, $playerNo)
    {
        $builder->addSbyteX(1, $playerNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addTimestamp(FlatBufferBuilder $builder, $timestamp)
    {
        $builder->addLongX(2, $timestamp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addResultCode(FlatBufferBuilder $builder, $resultCode)
    {
        $builder->addIntX(3, $resultCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmmResJoin(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
