<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmRoomSet extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmmRoomSet
     */
    public static function getRootAsRmmRoomSet(ByteBuffer $bb)
    {
        $obj = new RmmRoomSet();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmRoomSet
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return sbyte
     */
    public function getLeague()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getOpenRoomCount()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getPlayRoomCount()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getOpenRooms($j)
    {
        $o = $this->__offset(10);
        $obj = new RmmRoom();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getOpenRoomsLength()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getPlayRooms($j)
    {
        $o = $this->__offset(12);
        $obj = new RmmRoom();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getPlayRoomsLength()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmmRoomSet(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmmRoomSet
     */
    public static function createRmmRoomSet(FlatBufferBuilder $builder, $league, $openRoomCount, $playRoomCount, $openRooms, $playRooms)
    {
        $builder->startObject(5);
        self::addLeague($builder, $league);
        self::addOpenRoomCount($builder, $openRoomCount);
        self::addPlayRoomCount($builder, $playRoomCount);
        self::addOpenRooms($builder, $openRooms);
        self::addPlayRooms($builder, $playRooms);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addLeague(FlatBufferBuilder $builder, $league)
    {
        $builder->addSbyteX(0, $league, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addOpenRoomCount(FlatBufferBuilder $builder, $openRoomCount)
    {
        $builder->addIntX(1, $openRoomCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPlayRoomCount(FlatBufferBuilder $builder, $playRoomCount)
    {
        $builder->addIntX(2, $playRoomCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addOpenRooms(FlatBufferBuilder $builder, $openRooms)
    {
        $builder->addOffsetX(3, $openRooms, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createOpenRoomsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->addOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startOpenRoomsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addPlayRooms(FlatBufferBuilder $builder, $playRooms)
    {
        $builder->addOffsetX(4, $playRooms, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPlayRoomsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->addOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPlayRoomsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmmRoomSet(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
