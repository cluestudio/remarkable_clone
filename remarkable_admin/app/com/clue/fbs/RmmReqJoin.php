<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmReqJoin extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmmReqJoin
     */
    public static function getRootAsRmmReqJoin(ByteBuffer $bb)
    {
        $obj = new RmmReqJoin();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmReqJoin
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getUid()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return short
     */
    public function getHero()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return sbyte
     */
    public function getLeague()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    /**
     * @return sbyte
     */
    public function getRoomType()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \com\clue\fbs\RmmRoomType::None;
    }

    public function getVersion()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getAiPlayer()
    {
        $obj = new RmmPlayer();
        $o = $this->__offset(14);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmmReqJoin(FlatBufferBuilder $builder)
    {
        $builder->StartObject(6);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmmReqJoin
     */
    public static function createRmmReqJoin(FlatBufferBuilder $builder, $uid, $hero, $league, $roomType, $version, $aiPlayer)
    {
        $builder->startObject(6);
        self::addUid($builder, $uid);
        self::addHero($builder, $hero);
        self::addLeague($builder, $league);
        self::addRoomType($builder, $roomType);
        self::addVersion($builder, $version);
        self::addAiPlayer($builder, $aiPlayer);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUid(FlatBufferBuilder $builder, $uid)
    {
        $builder->addOffsetX(0, $uid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addHero(FlatBufferBuilder $builder, $hero)
    {
        $builder->addShortX(1, $hero, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addLeague(FlatBufferBuilder $builder, $league)
    {
        $builder->addSbyteX(2, $league, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addRoomType(FlatBufferBuilder $builder, $roomType)
    {
        $builder->addSbyteX(3, $roomType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addVersion(FlatBufferBuilder $builder, $version)
    {
        $builder->addOffsetX(4, $version, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addAiPlayer(FlatBufferBuilder $builder, $aiPlayer)
    {
        $builder->addOffsetX(5, $aiPlayer, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmmReqJoin(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
