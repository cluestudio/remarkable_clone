<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmNotiEnd extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmmNotiEnd
     */
    public static function getRootAsRmmNotiEnd(ByteBuffer $bb)
    {
        $obj = new RmmNotiEnd();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmNotiEnd
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return sbyte
     */
    public function getWinner()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    public function getPlayer0()
    {
        $obj = new RmmPlayer();
        $o = $this->__offset(6);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getPlayer1()
    {
        $obj = new RmmPlayer();
        $o = $this->__offset(8);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getReward0()
    {
        $obj = new RmmBattleReward();
        $o = $this->__offset(10);
        return $o != 0 ? $obj->init($o + $this->bb_pos, $this->bb) : 0;
    }

    public function getReward1()
    {
        $obj = new RmmBattleReward();
        $o = $this->__offset(12);
        return $o != 0 ? $obj->init($o + $this->bb_pos, $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmmNotiEnd(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmmNotiEnd
     */
    public static function createRmmNotiEnd(FlatBufferBuilder $builder, $winner, $player0, $player1, $reward0, $reward1)
    {
        $builder->startObject(5);
        self::addWinner($builder, $winner);
        self::addPlayer0($builder, $player0);
        self::addPlayer1($builder, $player1);
        self::addReward0($builder, $reward0);
        self::addReward1($builder, $reward1);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addWinner(FlatBufferBuilder $builder, $winner)
    {
        $builder->addSbyteX(0, $winner, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPlayer0(FlatBufferBuilder $builder, $player0)
    {
        $builder->addOffsetX(1, $player0, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPlayer1(FlatBufferBuilder $builder, $player1)
    {
        $builder->addOffsetX(2, $player1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addReward0(FlatBufferBuilder $builder, $reward0)
    {
        $builder->addStructX(3, $reward0, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addReward1(FlatBufferBuilder $builder, $reward1)
    {
        $builder->addStructX(4, $reward1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmmNotiEnd(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
