<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmPlayer extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmmPlayer
     */
    public static function getRootAsRmmPlayer(ByteBuffer $bb)
    {
        $obj = new RmmPlayer();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmPlayer
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return sbyte
     */
    public function getPlayerNo()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    public function getUid()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return bool
     */
    public function getAi()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    public function getName()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getCountry()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return short
     */
    public function getLeaguePoint()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return sbyte
     */
    public function getLevel()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getHero()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getHeroDeadTime()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getUnits($j)
    {
        $o = $this->__offset(22);
        $obj = new RmmUnit();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getUnitsLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return short
     */
    public function getKillHeroCount()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getKillPetCount()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return sbyte
     */
    public function getDeadCount()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getDealToHero()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getDealToPet()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getDamageFromHero()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getDamageFromPet()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmmPlayer(FlatBufferBuilder $builder)
    {
        $builder->StartObject(17);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmmPlayer
     */
    public static function createRmmPlayer(FlatBufferBuilder $builder, $playerNo, $uid, $ai, $name, $country, $leaguePoint, $level, $hero, $heroDeadTime, $units, $killHeroCount, $killPetCount, $deadCount, $dealToHero, $dealToPet, $damageFromHero, $damageFromPet)
    {
        $builder->startObject(17);
        self::addPlayerNo($builder, $playerNo);
        self::addUid($builder, $uid);
        self::addAi($builder, $ai);
        self::addName($builder, $name);
        self::addCountry($builder, $country);
        self::addLeaguePoint($builder, $leaguePoint);
        self::addLevel($builder, $level);
        self::addHero($builder, $hero);
        self::addHeroDeadTime($builder, $heroDeadTime);
        self::addUnits($builder, $units);
        self::addKillHeroCount($builder, $killHeroCount);
        self::addKillPetCount($builder, $killPetCount);
        self::addDeadCount($builder, $deadCount);
        self::addDealToHero($builder, $dealToHero);
        self::addDealToPet($builder, $dealToPet);
        self::addDamageFromHero($builder, $damageFromHero);
        self::addDamageFromPet($builder, $damageFromPet);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addPlayerNo(FlatBufferBuilder $builder, $playerNo)
    {
        $builder->addSbyteX(0, $playerNo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUid(FlatBufferBuilder $builder, $uid)
    {
        $builder->addOffsetX(1, $uid, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addAi(FlatBufferBuilder $builder, $ai)
    {
        $builder->addBoolX(2, $ai, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(3, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountry(FlatBufferBuilder $builder, $country)
    {
        $builder->addOffsetX(4, $country, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addLeaguePoint(FlatBufferBuilder $builder, $leaguePoint)
    {
        $builder->addShortX(5, $leaguePoint, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addLevel(FlatBufferBuilder $builder, $level)
    {
        $builder->addSbyteX(6, $level, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addHero(FlatBufferBuilder $builder, $hero)
    {
        $builder->addShortX(7, $hero, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addHeroDeadTime(FlatBufferBuilder $builder, $heroDeadTime)
    {
        $builder->addShortX(8, $heroDeadTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUnits(FlatBufferBuilder $builder, $units)
    {
        $builder->addOffsetX(9, $units, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createUnitsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->addOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startUnitsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addKillHeroCount(FlatBufferBuilder $builder, $killHeroCount)
    {
        $builder->addShortX(10, $killHeroCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addKillPetCount(FlatBufferBuilder $builder, $killPetCount)
    {
        $builder->addShortX(11, $killPetCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDeadCount(FlatBufferBuilder $builder, $deadCount)
    {
        $builder->addSbyteX(12, $deadCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDealToHero(FlatBufferBuilder $builder, $dealToHero)
    {
        $builder->addIntX(13, $dealToHero, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDealToPet(FlatBufferBuilder $builder, $dealToPet)
    {
        $builder->addIntX(14, $dealToPet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDamageFromHero(FlatBufferBuilder $builder, $damageFromHero)
    {
        $builder->addIntX(15, $damageFromHero, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDamageFromPet(FlatBufferBuilder $builder, $damageFromPet)
    {
        $builder->addIntX(16, $damageFromPet, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmmPlayer(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
