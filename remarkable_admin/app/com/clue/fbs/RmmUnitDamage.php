<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmUnitDamage extends Struct
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmUnitDamage
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return short
     */
    public function GetFrom()
    {
        return $this->bb->getShort($this->bb_pos + 0);
    }

    /**
     * @return short
     */
    public function GetTo()
    {
        return $this->bb->getShort($this->bb_pos + 2);
    }

    /**
     * @return short
     */
    public function GetDamage()
    {
        return $this->bb->getShort($this->bb_pos + 4);
    }

    /**
     * @return short
     */
    public function GetHp()
    {
        return $this->bb->getShort($this->bb_pos + 6);
    }

    /**
     * @return RmmVector2
     */
    public function getForce()
    {
        $obj = new RmmVector2();
        $obj->init($this->bb_pos + 8, $this->bb);
        return $obj;
    }


    /**
     * @return int offset
     */
    public static function createRmmUnitDamage(FlatBufferBuilder $builder, $from, $to, $damage, $hp, $force_x, $force_z)
    {
        $builder->prep(2, 12);
        $builder->prep(2, 4);
        $builder->putShort($force_z);
        $builder->putShort($force_x);
        $builder->putShort($hp);
        $builder->putShort($damage);
        $builder->putShort($to);
        $builder->putShort($from);
        return $builder->offset();
    }
}
