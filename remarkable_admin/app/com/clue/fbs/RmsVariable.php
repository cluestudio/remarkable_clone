<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmsVariable extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmsVariable
     */
    public static function getRootAsRmsVariable(ByteBuffer $bb)
    {
        $obj = new RmsVariable();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmsVariable
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return short
     */
    public function getPlayTime()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getCountDownTime()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    public function getMinVersion()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return short
     */
    public function getWinExp()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getLoseExp()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getDrawExp()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getMaxLevel()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getMaxLeague()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmsVariable(FlatBufferBuilder $builder)
    {
        $builder->StartObject(8);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmsVariable
     */
    public static function createRmsVariable(FlatBufferBuilder $builder, $playTime, $countDownTime, $minVersion, $winExp, $loseExp, $drawExp, $maxLevel, $maxLeague)
    {
        $builder->startObject(8);
        self::addPlayTime($builder, $playTime);
        self::addCountDownTime($builder, $countDownTime);
        self::addMinVersion($builder, $minVersion);
        self::addWinExp($builder, $winExp);
        self::addLoseExp($builder, $loseExp);
        self::addDrawExp($builder, $drawExp);
        self::addMaxLevel($builder, $maxLevel);
        self::addMaxLeague($builder, $maxLeague);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addPlayTime(FlatBufferBuilder $builder, $playTime)
    {
        $builder->addShortX(0, $playTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addCountDownTime(FlatBufferBuilder $builder, $countDownTime)
    {
        $builder->addShortX(1, $countDownTime, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addMinVersion(FlatBufferBuilder $builder, $minVersion)
    {
        $builder->addOffsetX(2, $minVersion, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addWinExp(FlatBufferBuilder $builder, $winExp)
    {
        $builder->addShortX(3, $winExp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addLoseExp(FlatBufferBuilder $builder, $loseExp)
    {
        $builder->addShortX(4, $loseExp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addDrawExp(FlatBufferBuilder $builder, $drawExp)
    {
        $builder->addShortX(5, $drawExp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addMaxLevel(FlatBufferBuilder $builder, $maxLevel)
    {
        $builder->addShortX(6, $maxLevel, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addMaxLeague(FlatBufferBuilder $builder, $maxLeague)
    {
        $builder->addShortX(7, $maxLeague, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmsVariable(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
