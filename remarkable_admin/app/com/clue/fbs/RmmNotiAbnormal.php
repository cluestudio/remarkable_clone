<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmNotiAbnormal extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmmNotiAbnormal
     */
    public static function getRootAsRmmNotiAbnormal(ByteBuffer $bb)
    {
        $obj = new RmmNotiAbnormal();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmNotiAbnormal
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return short
     */
    public function getSec()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getAbnormal($j)
    {
        $o = $this->__offset(6);
        $obj = new RmmAbnormal();
        return $o != 0 ? $obj->init($this->__vector($o) + $j *12, $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getAbnormalLength()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmmNotiAbnormal(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmmNotiAbnormal
     */
    public static function createRmmNotiAbnormal(FlatBufferBuilder $builder, $sec, $abnormal)
    {
        $builder->startObject(2);
        self::addSec($builder, $sec);
        self::addAbnormal($builder, $abnormal);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addSec(FlatBufferBuilder $builder, $sec)
    {
        $builder->addShortX(0, $sec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAbnormal(FlatBufferBuilder $builder, $abnormal)
    {
        $builder->addOffsetX(1, $abnormal, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAbnormalVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(12, count($data), 2);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->addOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAbnormalVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(12, $numElems, 2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmmNotiAbnormal(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
