<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmRoom extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmmRoom
     */
    public static function getRootAsRmmRoom(ByteBuffer $bb)
    {
        $obj = new RmmRoom();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmRoom
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getRoomId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return sbyte
     */
    public function getLeague()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    /**
     * @return sbyte
     */
    public function getState()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \com\clue\fbs\RmmRoomState::Open;
    }

    /**
     * @return long
     */
    public function getStartSec()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getPlaySec()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    public function getPlayer0()
    {
        $obj = new RmmPlayer();
        $o = $this->__offset(14);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getPlayer1()
    {
        $obj = new RmmPlayer();
        $o = $this->__offset(16);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmmRoom(FlatBufferBuilder $builder)
    {
        $builder->StartObject(7);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmmRoom
     */
    public static function createRmmRoom(FlatBufferBuilder $builder, $roomId, $league, $state, $startSec, $playSec, $player0, $player1)
    {
        $builder->startObject(7);
        self::addRoomId($builder, $roomId);
        self::addLeague($builder, $league);
        self::addState($builder, $state);
        self::addStartSec($builder, $startSec);
        self::addPlaySec($builder, $playSec);
        self::addPlayer0($builder, $player0);
        self::addPlayer1($builder, $player1);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRoomId(FlatBufferBuilder $builder, $roomId)
    {
        $builder->addOffsetX(0, $roomId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addLeague(FlatBufferBuilder $builder, $league)
    {
        $builder->addSbyteX(1, $league, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addState(FlatBufferBuilder $builder, $state)
    {
        $builder->addSbyteX(2, $state, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addStartSec(FlatBufferBuilder $builder, $startSec)
    {
        $builder->addLongX(3, $startSec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addPlaySec(FlatBufferBuilder $builder, $playSec)
    {
        $builder->addShortX(4, $playSec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPlayer0(FlatBufferBuilder $builder, $player0)
    {
        $builder->addOffsetX(5, $player0, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPlayer1(FlatBufferBuilder $builder, $player1)
    {
        $builder->addOffsetX(6, $player1, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmmRoom(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
