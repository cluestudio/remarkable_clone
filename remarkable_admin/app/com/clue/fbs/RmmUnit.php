<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmUnit extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return RmmUnit
     */
    public static function getRootAsRmmUnit(ByteBuffer $bb)
    {
        $obj = new RmmUnit();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmUnit
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return short
     */
    public function getKey()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getName()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return sbyte
     */
    public function getLevel()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getExp()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return sbyte
     */
    public function getType()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \com\clue\fbs\RmUnitType::Hero;
    }

    /**
     * @return short
     */
    public function getHp()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    public function getPosition()
    {
        $obj = new RmmVector2();
        $o = $this->__offset(16);
        return $o != 0 ? $obj->init($o + $this->bb_pos, $this->bb) : 0;
    }

    public function getDirection()
    {
        $obj = new RmmVector2b();
        $o = $this->__offset(18);
        return $o != 0 ? $obj->init($o + $this->bb_pos, $this->bb) : 0;
    }

    /**
     * @return short
     */
    public function getSkill1FireSec()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getSkill2FireSec()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getSkill3FireSec()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return short
     */
    public function getSkillSpecialFireSec()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getAbnormalList($j)
    {
        $o = $this->__offset(28);
        $obj = new RmmAbnormal();
        return $o != 0 ? $obj->init($this->__vector($o) + $j *12, $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getAbnormalListLength()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startRmmUnit(FlatBufferBuilder $builder)
    {
        $builder->StartObject(13);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return RmmUnit
     */
    public static function createRmmUnit(FlatBufferBuilder $builder, $key, $name, $level, $exp, $type, $hp, $position, $direction, $skill1FireSec, $skill2FireSec, $skill3FireSec, $skillSpecialFireSec, $abnormalList)
    {
        $builder->startObject(13);
        self::addKey($builder, $key);
        self::addName($builder, $name);
        self::addLevel($builder, $level);
        self::addExp($builder, $exp);
        self::addType($builder, $type);
        self::addHp($builder, $hp);
        self::addPosition($builder, $position);
        self::addDirection($builder, $direction);
        self::addSkill1FireSec($builder, $skill1FireSec);
        self::addSkill2FireSec($builder, $skill2FireSec);
        self::addSkill3FireSec($builder, $skill3FireSec);
        self::addSkillSpecialFireSec($builder, $skillSpecialFireSec);
        self::addAbnormalList($builder, $abnormalList);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addKey(FlatBufferBuilder $builder, $key)
    {
        $builder->addShortX(0, $key, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addShortX(1, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addLevel(FlatBufferBuilder $builder, $level)
    {
        $builder->addSbyteX(2, $level, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addExp(FlatBufferBuilder $builder, $exp)
    {
        $builder->addShortX(3, $exp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addSbyteX(4, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addHp(FlatBufferBuilder $builder, $hp)
    {
        $builder->addShortX(5, $hp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPosition(FlatBufferBuilder $builder, $position)
    {
        $builder->addStructX(6, $position, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDirection(FlatBufferBuilder $builder, $direction)
    {
        $builder->addStructX(7, $direction, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addSkill1FireSec(FlatBufferBuilder $builder, $skill1FireSec)
    {
        $builder->addShortX(8, $skill1FireSec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addSkill2FireSec(FlatBufferBuilder $builder, $skill2FireSec)
    {
        $builder->addShortX(9, $skill2FireSec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addSkill3FireSec(FlatBufferBuilder $builder, $skill3FireSec)
    {
        $builder->addShortX(10, $skill3FireSec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addSkillSpecialFireSec(FlatBufferBuilder $builder, $skillSpecialFireSec)
    {
        $builder->addShortX(11, $skillSpecialFireSec, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addAbnormalList(FlatBufferBuilder $builder, $abnormalList)
    {
        $builder->addOffsetX(12, $abnormalList, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createAbnormalListVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(12, count($data), 2);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->addOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startAbnormalListVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(12, $numElems, 2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endRmmUnit(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
