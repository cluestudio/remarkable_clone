<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmAbnormal extends Struct
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmAbnormal
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return sbyte
     */
    public function GetType()
    {
        return $this->bb->getSbyte($this->bb_pos + 0);
    }

    /**
     * @return short
     */
    public function GetFrom()
    {
        return $this->bb->getShort($this->bb_pos + 2);
    }

    /**
     * @return short
     */
    public function GetTo()
    {
        return $this->bb->getShort($this->bb_pos + 4);
    }

    /**
     * @return short
     */
    public function GetAt()
    {
        return $this->bb->getShort($this->bb_pos + 6);
    }

    /**
     * @return short
     */
    public function GetDuration()
    {
        return $this->bb->getShort($this->bb_pos + 8);
    }

    /**
     * @return short
     */
    public function GetValue()
    {
        return $this->bb->getShort($this->bb_pos + 10);
    }


    /**
     * @return int offset
     */
    public static function createRmmAbnormal(FlatBufferBuilder $builder, $type, $from, $to, $at, $duration, $value)
    {
        $builder->prep(2, 12);
        $builder->putShort($value);
        $builder->putShort($duration);
        $builder->putShort($at);
        $builder->putShort($to);
        $builder->putShort($from);
        $builder->pad(1);
        $builder->putSbyte($type);
        return $builder->offset();
    }
}
