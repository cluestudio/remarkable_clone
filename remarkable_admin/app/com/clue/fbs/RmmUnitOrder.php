<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace com\clue\fbs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class RmmUnitOrder extends Struct
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return RmmUnitOrder
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return short
     */
    public function GetFrom()
    {
        return $this->bb->getShort($this->bb_pos + 0);
    }

    /**
     * @return short
     */
    public function GetTarget()
    {
        return $this->bb->getShort($this->bb_pos + 2);
    }

    /**
     * @return RmmVector2
     */
    public function getPosition()
    {
        $obj = new RmmVector2();
        $obj->init($this->bb_pos + 4, $this->bb);
        return $obj;
    }

    /**
     * @return RmmVector2
     */
    public function getTo()
    {
        $obj = new RmmVector2();
        $obj->init($this->bb_pos + 8, $this->bb);
        return $obj;
    }

    /**
     * @return RmmVector2b
     */
    public function getDirection()
    {
        $obj = new RmmVector2b();
        $obj->init($this->bb_pos + 12, $this->bb);
        return $obj;
    }

    /**
     * @return sbyte
     */
    public function GetState()
    {
        return $this->bb->getSbyte($this->bb_pos + 14);
    }


    /**
     * @return int offset
     */
    public static function createRmmUnitOrder(FlatBufferBuilder $builder, $from, $target, $position_x, $position_z, $to_x, $to_z, $direction_x, $direction_z, $state)
    {
        $builder->prep(2, 16);
        $builder->pad(1);
        $builder->putSbyte($state);
        $builder->prep(1, 2);
        $builder->putSbyte($direction_z);
        $builder->putSbyte($direction_x);
        $builder->prep(2, 4);
        $builder->putShort($to_z);
        $builder->putShort($to_x);
        $builder->prep(2, 4);
        $builder->putShort($position_z);
        $builder->putShort($position_x);
        $builder->putShort($target);
        $builder->putShort($from);
        return $builder->offset();
    }
}
