// automatically generated by the FlatBuffers compiler, do not modify

package com.clue.fbs;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public class RmmRoomSet extends Table {
  public static RmmRoomSet getRootAsRmmRoomSet(ByteBuffer _bb) { return getRootAsRmmRoomSet(_bb, new RmmRoomSet()); }
  public static RmmRoomSet getRootAsRmmRoomSet(ByteBuffer _bb, RmmRoomSet obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public RmmRoomSet __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public byte league() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int openRoomCount() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int playRoomCount() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public RmmRoom openRooms(int j) { return openRooms(new RmmRoom(), j); }
  public RmmRoom openRooms(RmmRoom obj, int j) { int o = __offset(10); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int openRoomsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public RmmRoom playRooms(int j) { return playRooms(new RmmRoom(), j); }
  public RmmRoom playRooms(RmmRoom obj, int j) { int o = __offset(12); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int playRoomsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }

  public static int createRmmRoomSet(FlatBufferBuilder builder,
      byte league,
      int openRoomCount,
      int playRoomCount,
      int openRoomsOffset,
      int playRoomsOffset) {
    builder.startObject(5);
    RmmRoomSet.addPlayRooms(builder, playRoomsOffset);
    RmmRoomSet.addOpenRooms(builder, openRoomsOffset);
    RmmRoomSet.addPlayRoomCount(builder, playRoomCount);
    RmmRoomSet.addOpenRoomCount(builder, openRoomCount);
    RmmRoomSet.addLeague(builder, league);
    return RmmRoomSet.endRmmRoomSet(builder);
  }

  public static void startRmmRoomSet(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addLeague(FlatBufferBuilder builder, byte league) { builder.addByte(0, league, 0); }
  public static void addOpenRoomCount(FlatBufferBuilder builder, int openRoomCount) { builder.addInt(1, openRoomCount, 0); }
  public static void addPlayRoomCount(FlatBufferBuilder builder, int playRoomCount) { builder.addInt(2, playRoomCount, 0); }
  public static void addOpenRooms(FlatBufferBuilder builder, int openRoomsOffset) { builder.addOffset(3, openRoomsOffset, 0); }
  public static int createOpenRoomsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOpenRoomsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPlayRooms(FlatBufferBuilder builder, int playRoomsOffset) { builder.addOffset(4, playRoomsOffset, 0); }
  public static int createPlayRoomsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlayRoomsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRmmRoomSet(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

